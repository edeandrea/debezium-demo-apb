- name: Provision Prometheus
  block:
    - name: "Log into OpenShift as admin"
      k8s_auth:
        username: "{{ ocp_admin }}"
        password: "{{ ocp_admin_pwd }}"
      register: k8s_auth_results

    - name: Install Prometheus Operator
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_rh_operators }}"
        definition: "{{ lookup('template', '../objects/prometheus-operator.yml') }}"

    - name: Wait for Prometheus Operator to spin up
      k8s_info:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_demo }}"
        api_version: apps/v1
        kind: Deployment
        name: prometheus-operator
      register: prometheus_operator_deployment
      until: prometheus_operator_deployment.resources is defined and prometheus_operator_deployment.resources|length == 1 and prometheus_operator_deployment.resources[0].status.readyReplicas is defined and prometheus_operator_deployment.resources[0].status.readyReplicas == 1 and prometheus_operator_deployment.resources[0].status.availableReplicas is defined and prometheus_operator_deployment.resources[0].status.availableReplicas == 1
      retries: 50
      delay: 10

    - name: Check if Prometheus is already deployed
      k8s_info:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: v1
        kind: Service
        namespace: "{{ proj_nm_demo }}"
        name: prometheus
      register: prometheus_svc

    - name: Deploy Kafka Pod Monitors
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_demo }}"
        definition: "{{ lookup('template', '../objects/kafka-pod-monitors.yml') }}"
      when: prometheus_svc.resources|length == 0

    - name: Deploy RHDG Service Monitor
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_demo }}"
        definition: "{{ lookup('template', '../objects/rhdg-service-monitor.yml') }}"
      when: prometheus_svc.resources|length == 0

    - name: Log out of OpenShift admin user
      when: k8s_auth_results.k8s_auth.api_key is defined
      k8s_auth:
        state: absent
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        
    - name: "Log into OpenShift as project user"
      k8s_auth:
        username: "{{ ocp_proj_user }}"
        password: "{{ ocp_proj_user_pwd }}"
      register: k8s_auth_results

    - name: Deploy Scrape Configs
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_demo }}"
        definition: "{{ lookup('template', '../objects/additional-scrape-configs-secret.yml') }}"
      when: prometheus_svc.resources|length == 0

    - name: Deploy Prometheus rules
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_demo }}"
        definition: "{{ lookup('template', '../objects/prometheus-rule.yml') }}"
      when: prometheus_svc.resources|length == 0

    - name: Deploy Prometheus
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        namespace: "{{ proj_nm_demo }}"
        definition: "{{ lookup('template', '../objects/prometheus.yml') }}"
      when: prometheus_svc.resources|length == 0

    # - name: Deploy Alert Manager config
    #   k8s:
    #     api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    #     namespace: "{{ proj_nm_demo }}"
    #     definition: "{{ lookup('template', '../objects/alert-manager-config.yml') }}"
    #   when: prometheus_svc.resources|length == 0
    #
    # - name: Deploy Alert Manager
    #   k8s:
    #     api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    #     namespace: "{{ proj_nm_demo }}"
    #     definition: "{{ lookup('template', '../objects/alert-manager.yml') }}"
    #   when: prometheus_svc.resources|length == 0

  always:
    - name: If OpenShift login succeeded try to log out
      when: k8s_auth_results.k8s_auth.api_key is defined
      k8s_auth:
        state: absent
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
